in server context.xml <context>
<Resource name="jdbc/TestDB" auth="Container" type="javax.sql.DataSource"
               maxActive="100" maxIdle="30" maxWait="10000"
               username="javauser" password="javadude" driverClassName="com.mysql.jdbc.Driver"
               url="jdbc:mysql://localhost:3306/javatest"/>
               
in app web.xml
 <web-app>
  <resource-ref>
      <description>DB Connection</description>
      <res-ref-name>jdbc/TestDB</res-ref-name>
      <res-type>javax.sql.DataSource</res-type>
      <res-auth>Container</res-auth>
  </resource-ref>
</web-app>

another example
server.xml, server.xml file. The code should be added in the GlobalNamingResources
<Resource name="jdbc/MyDB" 
      global="jdbc/MyDB" 
      auth="Container" 
      type="javax.sql.DataSource" 
      driverClassName="oracle.jdbc.driver.OracleDriver" 
      url="jdbc:oracle:thin:@localhost:1521:orcl" 
      username="hr" 
      password="oracle" 
      
      maxActive="100" 
      maxIdle="20" 
      minIdle="5" 
      maxWait="10000"/>

server's context.xml, server context.xml file.
<ResourceLink name="jdbc/MyLocalDB"
                global="jdbc/MyDB"
                auth="Container"
                type="javax.sql.DataSource" />

webapp's web.xml
  refer to resource-ref
  
to use : 
		ctx = new InitialContext();
		DataSource ds = (DataSource) ctx.lookup("java:/comp/env/jdbc/MyLocalDB");
		con = ds.getConnection();
		stmt = con.createStatement();
		rs = stmt.executeQuery("select empid, name from Employee");
		PrintWriter out = response.getWriter();
            

setup webapp context parameter
<web-app>
<context-param>
<param-name>jdbcURL</param-name>
<param-value>jdbc:oracle:thin:@myhost:1521</param-value>
</context-param>
</web-app>

to use:
case 0, in appliation?
Context initContext = new InitialContext();
Context envContext  = (Context)initContext.lookup("java:/comp/env");
DataSource ds = (DataSource)envContext.lookup("jdbc/myoracle");
Connection conn = ds.getConnection();

case 1, in servlet

  public void init(ServletConfig config)throws ServletException {
    this.config = config;
    super.init(config);
  }
  
  .....
     ServletContext application = config.getServletContext();
      String driverclass = 
        application.getInitParameter("driverclass"); 
      String jdbcURL = application.getInitParameter("jdbcURL"); 

case 2
@WebListener
public class AppContextListener implements ServletContextListener {

    public void contextInitialized(ServletContextEvent servletContextEvent) {
    	ServletContext ctx = servletContextEvent.getServletContext();
    	
    	//initialize DB Connection
    	String dbURL = ctx.getInitParameter("dbURL");
    	String user = ctx.getInitParameter("dbUser");
    	String pwd = ctx.getInitParameter("dbPassword");
    	;;;
        
